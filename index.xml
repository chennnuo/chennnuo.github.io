<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Welcome to My Notes Web！ on My Docs</title><link>https://chennnuo.github.io/</link><description>Recent content in Welcome to My Notes Web！ on My Docs</description><generator>Hugo</generator><language>en</language><copyright>Copyright (c) 2020-2024 Thulite</copyright><lastBuildDate>Mon, 18 Nov 2024 14:20:00 +0800</lastBuildDate><atom:link href="https://chennnuo.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Example Post</title><link>https://chennnuo.github.io/blog/example-post/</link><pubDate>Thu, 07 Sep 2023 16:27:22 +0200</pubDate><guid>https://chennnuo.github.io/blog/example-post/</guid><description>You can use blog posts for announcing product updates and features.</description></item><item><title>MMCV-Runner</title><link>https://chennnuo.github.io/docs/mmcv/mmcv-runner/</link><pubDate>Mon, 18 Nov 2024 14:20:00 +0800</pubDate><guid>https://chennnuo.github.io/docs/mmcv/mmcv-runner/</guid><description>Runner Runner是算法训练部分的引擎，其核心功能和特性如下：
负责MMCV中所有框架的训练过程调度
支持定制工作流以满足训练过程中的各状态自由切换
提供了Epoch和Iter为基础的迭代模式，以满足不同的场景
配合各类Hook，对外提供了灵活的拓展能力，注入不同Hook可在训练过程中优雅的实现拓展功能
运行步骤 Runner对象初始化
注册各类 Hook 到 Runner 中
调用 Runner 中的 rusume 或者 load_checkpoint 方法对权重进行加载</description></item><item><title>What is Attention</title><link>https://chennnuo.github.io/docs/notes/what-is-attention/</link><pubDate>Mon, 18 Nov 2024 14:20:00 +0800</pubDate><guid>https://chennnuo.github.io/docs/notes/what-is-attention/</guid><description>0. 参考资料 Video 动画形式直观解释注意力机制 1. Attention机制概述 Attention机制是Transformer架构的核心,它使模型能够动态地关注输入序列中的不同部分。这种机制允许模型捕捉长距离依赖关系,这在处理长序列时特别重要。
2. Self-Attention的基本概念 Self-Attention的核心思想是,序列中的每个元素都应该关注整个序列,包括自身。它通过以下三个关键概念实现:
Query (查询): 当前我们正在处理的元素 Key (键): 用于与Query进行比较的元素 Value (值): 实际被聚合的信息 以NLP任务为例，Value 是前面这些词最终想要加给下一个单词的的偏移量，目标是得到 Q &amp;ndash;&amp;gt; V 的映射，这个映射主要用来压缩前后文信息，加到当前word上。</description></item><item><title>introduction</title><link>https://chennnuo.github.io/docs/introduction/introduction/</link><pubDate>Thu, 07 Sep 2023 16:04:48 +0200</pubDate><guid>https://chennnuo.github.io/docs/introduction/introduction/</guid><description>这里是我的个人笔记网站 欢迎大家访问！
关键 shell 命令 生成网页 生成本地网页npm run dev创建新md 创建新的文件npm run create docs/notes/Attention.md</description></item><item><title>Linux</title><link>https://chennnuo.github.io/docs/linux/linux/</link><pubDate>Thu, 07 Sep 2023 16:04:48 +0200</pubDate><guid>https://chennnuo.github.io/docs/linux/linux/</guid><description>Linux 实用小技巧
Further reading Read about how-to guides in the Diátaxis framework</description></item><item><title>MMCV-Registry</title><link>https://chennnuo.github.io/docs/mmcv/mmcv-registry/</link><pubDate>Thu, 07 Sep 2023 16:04:48 +0200</pubDate><guid>https://chennnuo.github.io/docs/mmcv/mmcv-registry/</guid><description>Registry Registry可以提供一种完全相似的对外装饰函数来管理构建不同组件 例如：backbone、head、neck等 其实内部实现是一个全局的key-value对 优点是可以通过字符串实例化任何想要的模块、解耦性强、可扩展性强，代码更易理解。
# 例如Faster R-CNN的backbone： backbone=dict( type=&amp;#39;ResNet&amp;#39;, # 待实例化的类名 depth=50, # 后面的都是对于的类初始化参数 num_stages=4, out_indices=(0, 1, 2, 3), frozen_stages=1, norm_cfg=dict(type=&amp;#39;BN&amp;#39;, requires_grad=True), norm_eval=True, style=&amp;#39;pytorch&amp;#39;),主要是注册器类Registry()和函数register_module() 简单实现类似于：</description></item><item><title>Example Reference</title><link>https://chennnuo.github.io/docs/reference/example-reference/</link><pubDate>Thu, 07 Sep 2023 16:13:18 +0200</pubDate><guid>https://chennnuo.github.io/docs/reference/example-reference/</guid><description>Reference pages are ideal for outlining how things work in terse and clear terms. Less concerned with telling a story or addressing a specific use case, they should give a comprehensive outline of what your documenting.</description></item><item><title>Resources</title><link>https://chennnuo.github.io/docs/resources/</link><pubDate>Tue, 27 Feb 2024 09:30:56 +0100</pubDate><guid>https://chennnuo.github.io/docs/resources/</guid><description>Link to valuable, relevant resources.</description></item><item><title>Connect to me</title><link>https://chennnuo.github.io/connect-to-me/</link><pubDate>Thu, 07 Sep 2023 17:19:07 +0200</pubDate><guid>https://chennnuo.github.io/connect-to-me/</guid><description/></item></channel></rss>